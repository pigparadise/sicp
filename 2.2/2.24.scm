(define (draw-tree tree)
  (newline)
  (define (draw-line w)
    (cond ((> w 0)
           (display "--")
           (draw-line (- w 1))
          )
    )
  )

  (define (iter depth tree)
    (cond ((and (pair? tree) (not (null? tree)))
           (cond ((null? (cdr tree))
                  (iter depth (car tree))
                 )
                 (else
                  (draw-line depth)(display tree)(display " branch")(newline)
                  (iter (+ depth 1) (car tree))
                  (iter (+ depth 1) (cdr tree))
                 )
           )
          )
          ((not (null? tree))
           (draw-line depth)(display tree)(display " leaf")(newline)
          )
    )
  )
  (iter 0 tree)
)

(define tree (list 1 (list 2 (list 3 4))))
;; (define tree (cons (list 1 2) (list 3 4)))

(draw-tree tree)